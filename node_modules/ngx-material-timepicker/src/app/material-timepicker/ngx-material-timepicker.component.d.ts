import { EventEmitter, TemplateRef } from '@angular/core';
import { Subject } from 'rxjs';
import { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';
import { TimepickerDirective } from './directives/ngx-timepicker.directive';
import { DateTime } from 'luxon';
import { DomService } from './services/dom.service';
import { TimepickerRef } from './models/timepicker-ref.interface';
import { NgxMaterialTimepickerTheme } from './models/ngx-material-timepicker-theme.interface';
import * as ɵngcc0 from '@angular/core';
export declare class NgxMaterialTimepickerComponent implements TimepickerRef {
    private eventService;
    private domService;
    timeUpdated: Subject<string>;
    cancelBtnTmpl: TemplateRef<Node>;
    editableHintTmpl: TemplateRef<Node>;
    confirmBtnTmpl: TemplateRef<Node>;
    isEsc: boolean;
    enableKeyboardInput: boolean;
    preventOverlayClick: boolean;
    disableAnimation: boolean;
    appendToInput: boolean;
    hoursOnly: boolean;
    defaultTime: string;
    timepickerClass: string;
    theme: NgxMaterialTimepickerTheme;
    min: DateTime;
    max: DateTime;
    /**
     * @deprecated Since version 5.1.1. Will be deleted on version 6.0.0. Use @Input() theme instead
     */
    ngxMaterialTimepickerTheme: NgxMaterialTimepickerTheme;
    format: number;
    minutesGap: number;
    timeSet: EventEmitter<string>;
    opened: EventEmitter<null>;
    closed: EventEmitter<null>;
    hourSelected: EventEmitter<number>;
    timeChanged: EventEmitter<string>;
    private _minutesGap;
    private _format;
    private _ngxMaterialTimepickerTheme;
    private timepickerInput;
    private unsubscribe;
    constructor(eventService: NgxMaterialTimepickerEventService, domService: DomService);
    readonly minTime: DateTime;
    readonly maxTime: DateTime;
    readonly disabled: boolean;
    readonly time: string;
    readonly inputElement: any;
    /***
     * Register an input with this timepicker.
     * input - The timepicker input to register with this timepicker
     */
    registerInput(input: TimepickerDirective): void;
    open(): void;
    close(): void;
    updateTime(time: string): void;
    private subscribeToEvents;
    private unsubscribeFromEvents;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxMaterialTimepickerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxMaterialTimepickerComponent, "ngx-material-timepicker", never, {
    "isEsc": "ESC";
    "hoursOnly": "hoursOnly";
    "ngxMaterialTimepickerTheme": "ngxMaterialTimepickerTheme";
    "format": "format";
    "minutesGap": "minutesGap";
    "cancelBtnTmpl": "cancelBtnTmpl";
    "editableHintTmpl": "editableHintTmpl";
    "confirmBtnTmpl": "confirmBtnTmpl";
    "enableKeyboardInput": "enableKeyboardInput";
    "preventOverlayClick": "preventOverlayClick";
    "disableAnimation": "disableAnimation";
    "appendToInput": "appendToInput";
    "defaultTime": "defaultTime";
    "timepickerClass": "timepickerClass";
    "theme": "theme";
    "min": "min";
    "max": "max";
}, {
    "timeSet": "timeSet";
    "opened": "opened";
    "closed": "closed";
    "hourSelected": "hourSelected";
    "timeChanged": "timeChanged";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1tYXRlcmlhbC10aW1lcGlja2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtEQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5neE1hdGVyaWFsVGltZXBpY2tlckV2ZW50U2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXItZXZlbnQuc2VydmljZSc7XG5pbXBvcnQgeyBUaW1lcGlja2VyRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL25neC10aW1lcGlja2VyLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcbmltcG9ydCB7IERvbVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2RvbS5zZXJ2aWNlJztcbmltcG9ydCB7IFRpbWVwaWNrZXJSZWYgfSBmcm9tICcuL21vZGVscy90aW1lcGlja2VyLXJlZi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgTmd4TWF0ZXJpYWxUaW1lcGlja2VyVGhlbWUgfSBmcm9tICcuL21vZGVscy9uZ3gtbWF0ZXJpYWwtdGltZXBpY2tlci10aGVtZS5pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4TWF0ZXJpYWxUaW1lcGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgVGltZXBpY2tlclJlZiB7XG4gICAgcHJpdmF0ZSBldmVudFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBkb21TZXJ2aWNlO1xuICAgIHRpbWVVcGRhdGVkOiBTdWJqZWN0PHN0cmluZz47XG4gICAgY2FuY2VsQnRuVG1wbDogVGVtcGxhdGVSZWY8Tm9kZT47XG4gICAgZWRpdGFibGVIaW50VG1wbDogVGVtcGxhdGVSZWY8Tm9kZT47XG4gICAgY29uZmlybUJ0blRtcGw6IFRlbXBsYXRlUmVmPE5vZGU+O1xuICAgIGlzRXNjOiBib29sZWFuO1xuICAgIGVuYWJsZUtleWJvYXJkSW5wdXQ6IGJvb2xlYW47XG4gICAgcHJldmVudE92ZXJsYXlDbGljazogYm9vbGVhbjtcbiAgICBkaXNhYmxlQW5pbWF0aW9uOiBib29sZWFuO1xuICAgIGFwcGVuZFRvSW5wdXQ6IGJvb2xlYW47XG4gICAgaG91cnNPbmx5OiBib29sZWFuO1xuICAgIGRlZmF1bHRUaW1lOiBzdHJpbmc7XG4gICAgdGltZXBpY2tlckNsYXNzOiBzdHJpbmc7XG4gICAgdGhlbWU6IE5neE1hdGVyaWFsVGltZXBpY2tlclRoZW1lO1xuICAgIG1pbjogRGF0ZVRpbWU7XG4gICAgbWF4OiBEYXRlVGltZTtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBTaW5jZSB2ZXJzaW9uIDUuMS4xLiBXaWxsIGJlIGRlbGV0ZWQgb24gdmVyc2lvbiA2LjAuMC4gVXNlIEBJbnB1dCgpIHRoZW1lIGluc3RlYWRcbiAgICAgKi9cbiAgICBuZ3hNYXRlcmlhbFRpbWVwaWNrZXJUaGVtZTogTmd4TWF0ZXJpYWxUaW1lcGlja2VyVGhlbWU7XG4gICAgZm9ybWF0OiBudW1iZXI7XG4gICAgbWludXRlc0dhcDogbnVtYmVyO1xuICAgIHRpbWVTZXQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIG9wZW5lZDogRXZlbnRFbWl0dGVyPG51bGw+O1xuICAgIGNsb3NlZDogRXZlbnRFbWl0dGVyPG51bGw+O1xuICAgIGhvdXJTZWxlY3RlZDogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgdGltZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIHByaXZhdGUgX21pbnV0ZXNHYXA7XG4gICAgcHJpdmF0ZSBfZm9ybWF0O1xuICAgIHByaXZhdGUgX25neE1hdGVyaWFsVGltZXBpY2tlclRoZW1lO1xuICAgIHByaXZhdGUgdGltZXBpY2tlcklucHV0O1xuICAgIHByaXZhdGUgdW5zdWJzY3JpYmU7XG4gICAgY29uc3RydWN0b3IoZXZlbnRTZXJ2aWNlOiBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJFdmVudFNlcnZpY2UsIGRvbVNlcnZpY2U6IERvbVNlcnZpY2UpO1xuICAgIHJlYWRvbmx5IG1pblRpbWU6IERhdGVUaW1lO1xuICAgIHJlYWRvbmx5IG1heFRpbWU6IERhdGVUaW1lO1xuICAgIHJlYWRvbmx5IGRpc2FibGVkOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHRpbWU6IHN0cmluZztcbiAgICByZWFkb25seSBpbnB1dEVsZW1lbnQ6IGFueTtcbiAgICAvKioqXG4gICAgICogUmVnaXN0ZXIgYW4gaW5wdXQgd2l0aCB0aGlzIHRpbWVwaWNrZXIuXG4gICAgICogaW5wdXQgLSBUaGUgdGltZXBpY2tlciBpbnB1dCB0byByZWdpc3RlciB3aXRoIHRoaXMgdGltZXBpY2tlclxuICAgICAqL1xuICAgIHJlZ2lzdGVySW5wdXQoaW5wdXQ6IFRpbWVwaWNrZXJEaXJlY3RpdmUpOiB2b2lkO1xuICAgIG9wZW4oKTogdm9pZDtcbiAgICBjbG9zZSgpOiB2b2lkO1xuICAgIHVwZGF0ZVRpbWUodGltZTogc3RyaW5nKTogdm9pZDtcbiAgICBwcml2YXRlIHN1YnNjcmliZVRvRXZlbnRzO1xuICAgIHByaXZhdGUgdW5zdWJzY3JpYmVGcm9tRXZlbnRzO1xufVxuIl19