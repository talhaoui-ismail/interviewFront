import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { TimeUnit } from '../../../models/time-unit.enum';
import { TimeParserPipe } from '../../../pipes/time-parser.pipe';
import { ClockFaceTime } from '../../../models/clock-face-time.interface';
import * as ɵngcc0 from '@angular/core';
export declare class NgxTimepickerTimeControlComponent implements OnChanges {
    private timeParser;
    time: number;
    min: number;
    max: number;
    placeholder: string;
    timeUnit: TimeUnit;
    disabled: boolean;
    timeList: ClockFaceTime[];
    preventTyping: boolean;
    timeChanged: EventEmitter<number>;
    isFocused: boolean;
    private previousTime;
    constructor(timeParser: TimeParserPipe);
    ngOnChanges(changes: SimpleChanges): void;
    changeTime(event: any): void;
    onKeydown(event: any): void;
    increase(): void;
    decrease(): void;
    onFocus(): void;
    onBlur(): void;
    onModelChange(value: string): void;
    private changeTimeIfValid;
    private isSelectedTimeDisabled;
    private getNextAvailableTime;
    private getPrevAvailableTime;
    private getAvailableTime;
    private setAvailableTime;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxTimepickerTimeControlComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxTimepickerTimeControlComponent, "ngx-timepicker-time-control", never, {
    "time": "time";
    "min": "min";
    "max": "max";
    "placeholder": "placeholder";
    "timeUnit": "timeUnit";
    "disabled": "disabled";
    "timeList": "timeList";
    "preventTyping": "preventTyping";
}, {
    "timeChanged": "timeChanged";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRpbWVwaWNrZXItdGltZS1jb250cm9sLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZ3gtdGltZXBpY2tlci10aW1lLWNvbnRyb2wuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRpbWVVbml0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL3RpbWUtdW5pdC5lbnVtJztcbmltcG9ydCB7IFRpbWVQYXJzZXJQaXBlIH0gZnJvbSAnLi4vLi4vLi4vcGlwZXMvdGltZS1wYXJzZXIucGlwZSc7XG5pbXBvcnQgeyBDbG9ja0ZhY2VUaW1lIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL2Nsb2NrLWZhY2UtdGltZS5pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4VGltZXBpY2tlclRpbWVDb250cm9sQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIHRpbWVQYXJzZXI7XG4gICAgdGltZTogbnVtYmVyO1xuICAgIG1pbjogbnVtYmVyO1xuICAgIG1heDogbnVtYmVyO1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgdGltZVVuaXQ6IFRpbWVVbml0O1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHRpbWVMaXN0OiBDbG9ja0ZhY2VUaW1lW107XG4gICAgcHJldmVudFR5cGluZzogYm9vbGVhbjtcbiAgICB0aW1lQ2hhbmdlZDogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgaXNGb2N1c2VkOiBib29sZWFuO1xuICAgIHByaXZhdGUgcHJldmlvdXNUaW1lO1xuICAgIGNvbnN0cnVjdG9yKHRpbWVQYXJzZXI6IFRpbWVQYXJzZXJQaXBlKTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBjaGFuZ2VUaW1lKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uS2V5ZG93bihldmVudDogYW55KTogdm9pZDtcbiAgICBpbmNyZWFzZSgpOiB2b2lkO1xuICAgIGRlY3JlYXNlKCk6IHZvaWQ7XG4gICAgb25Gb2N1cygpOiB2b2lkO1xuICAgIG9uQmx1cigpOiB2b2lkO1xuICAgIG9uTW9kZWxDaGFuZ2UodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGFuZ2VUaW1lSWZWYWxpZDtcbiAgICBwcml2YXRlIGlzU2VsZWN0ZWRUaW1lRGlzYWJsZWQ7XG4gICAgcHJpdmF0ZSBnZXROZXh0QXZhaWxhYmxlVGltZTtcbiAgICBwcml2YXRlIGdldFByZXZBdmFpbGFibGVUaW1lO1xuICAgIHByaXZhdGUgZ2V0QXZhaWxhYmxlVGltZTtcbiAgICBwcml2YXRlIHNldEF2YWlsYWJsZVRpbWU7XG59XG4iXX0=