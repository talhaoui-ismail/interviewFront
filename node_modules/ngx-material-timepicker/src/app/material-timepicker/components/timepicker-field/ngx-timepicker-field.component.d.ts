import { EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';
import { Observable } from 'rxjs';
import { ClockFaceTime } from '../../models/clock-face-time.interface';
import { TimePeriod } from '../../models/time-period.enum';
import { TimeUnit } from '../../models/time-unit.enum';
import { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';
import { DateTime } from 'luxon';
import * as ɵngcc0 from '@angular/core';
export declare class NgxTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {
    private timepickerService;
    private locale;
    period: TimePeriod;
    hour$: Observable<ClockFaceTime>;
    minute$: Observable<ClockFaceTime>;
    minHour: number;
    maxHour: number;
    timeUnit: typeof TimeUnit;
    timepickerTime: string;
    hoursList: ClockFaceTime[];
    minutesList: ClockFaceTime[];
    isTimeRangeSet: boolean;
    isChangePeriodDisabled: boolean;
    disabled: boolean;
    toggleIcon: TemplateRef<HTMLObjectElement>;
    buttonAlign: 'right' | 'left';
    clockTheme: NgxMaterialTimepickerTheme;
    controlOnly: boolean;
    cancelBtnTmpl: TemplateRef<Node>;
    confirmBtnTmpl: TemplateRef<Node>;
    format: number;
    min: string | DateTime;
    max: string | DateTime;
    defaultTime: string;
    timeChanged: EventEmitter<string>;
    private _defaultTime;
    private _format;
    private _min;
    private _max;
    private previousFormat;
    private unsubscribe$;
    private isFirstTimeChange;
    private isDefaultTime;
    private selectedHour;
    private onChange;
    constructor(timepickerService: NgxMaterialTimepickerService, locale: string);
    ngOnInit(): void;
    writeValue(val: string): void;
    registerOnTouched(fn: any): void;
    registerOnChange(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    changeHour(hour: number): void;
    changeMinute(minute: number): void;
    changePeriod(period: TimePeriod): void;
    onTimeSet(time: string): void;
    ngOnDestroy(): void;
    private changeTime;
    private resetTime;
    private emitLocalTimeChange;
    private changeDefaultTimeValue;
    private updateAvailableHours;
    private updateAvailableMinutes;
    private updateAvailableTime;
    private updateTime;
    private initTime;
    private isPeriodDisabled;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxTimepickerFieldComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxTimepickerFieldComponent, "ngx-timepicker-field", never, {
    "buttonAlign": "buttonAlign";
    "format": "format";
    "min": "min";
    "max": "max";
    "defaultTime": "defaultTime";
    "disabled": "disabled";
    "toggleIcon": "toggleIcon";
    "clockTheme": "clockTheme";
    "controlOnly": "controlOnly";
    "cancelBtnTmpl": "cancelBtnTmpl";
    "confirmBtnTmpl": "confirmBtnTmpl";
}, {
    "timeChanged": "timeChanged";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRpbWVwaWNrZXItZmllbGQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC10aW1lcGlja2VyLWZpZWxkLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgT25Jbml0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIuc2VydmljZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDbG9ja0ZhY2VUaW1lIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2Nsb2NrLWZhY2UtdGltZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGltZVBlcmlvZCB9IGZyb20gJy4uLy4uL21vZGVscy90aW1lLXBlcmlvZC5lbnVtJztcbmltcG9ydCB7IFRpbWVVbml0IH0gZnJvbSAnLi4vLi4vbW9kZWxzL3RpbWUtdW5pdC5lbnVtJztcbmltcG9ydCB7IE5neE1hdGVyaWFsVGltZXBpY2tlclRoZW1lIH0gZnJvbSAnLi4vLi4vbW9kZWxzL25neC1tYXRlcmlhbC10aW1lcGlja2VyLXRoZW1lLmludGVyZmFjZSc7XG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neFRpbWVwaWNrZXJGaWVsZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJpdmF0ZSB0aW1lcGlja2VyU2VydmljZTtcbiAgICBwcml2YXRlIGxvY2FsZTtcbiAgICBwZXJpb2Q6IFRpbWVQZXJpb2Q7XG4gICAgaG91ciQ6IE9ic2VydmFibGU8Q2xvY2tGYWNlVGltZT47XG4gICAgbWludXRlJDogT2JzZXJ2YWJsZTxDbG9ja0ZhY2VUaW1lPjtcbiAgICBtaW5Ib3VyOiBudW1iZXI7XG4gICAgbWF4SG91cjogbnVtYmVyO1xuICAgIHRpbWVVbml0OiB0eXBlb2YgVGltZVVuaXQ7XG4gICAgdGltZXBpY2tlclRpbWU6IHN0cmluZztcbiAgICBob3Vyc0xpc3Q6IENsb2NrRmFjZVRpbWVbXTtcbiAgICBtaW51dGVzTGlzdDogQ2xvY2tGYWNlVGltZVtdO1xuICAgIGlzVGltZVJhbmdlU2V0OiBib29sZWFuO1xuICAgIGlzQ2hhbmdlUGVyaW9kRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgdG9nZ2xlSWNvbjogVGVtcGxhdGVSZWY8SFRNTE9iamVjdEVsZW1lbnQ+O1xuICAgIGJ1dHRvbkFsaWduOiAncmlnaHQnIHwgJ2xlZnQnO1xuICAgIGNsb2NrVGhlbWU6IE5neE1hdGVyaWFsVGltZXBpY2tlclRoZW1lO1xuICAgIGNvbnRyb2xPbmx5OiBib29sZWFuO1xuICAgIGNhbmNlbEJ0blRtcGw6IFRlbXBsYXRlUmVmPE5vZGU+O1xuICAgIGNvbmZpcm1CdG5UbXBsOiBUZW1wbGF0ZVJlZjxOb2RlPjtcbiAgICBmb3JtYXQ6IG51bWJlcjtcbiAgICBtaW46IHN0cmluZyB8IERhdGVUaW1lO1xuICAgIG1heDogc3RyaW5nIHwgRGF0ZVRpbWU7XG4gICAgZGVmYXVsdFRpbWU6IHN0cmluZztcbiAgICB0aW1lQ2hhbmdlZDogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgcHJpdmF0ZSBfZGVmYXVsdFRpbWU7XG4gICAgcHJpdmF0ZSBfZm9ybWF0O1xuICAgIHByaXZhdGUgX21pbjtcbiAgICBwcml2YXRlIF9tYXg7XG4gICAgcHJpdmF0ZSBwcmV2aW91c0Zvcm1hdDtcbiAgICBwcml2YXRlIHVuc3Vic2NyaWJlJDtcbiAgICBwcml2YXRlIGlzRmlyc3RUaW1lQ2hhbmdlO1xuICAgIHByaXZhdGUgaXNEZWZhdWx0VGltZTtcbiAgICBwcml2YXRlIHNlbGVjdGVkSG91cjtcbiAgICBwcml2YXRlIG9uQ2hhbmdlO1xuICAgIGNvbnN0cnVjdG9yKHRpbWVwaWNrZXJTZXJ2aWNlOiBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJTZXJ2aWNlLCBsb2NhbGU6IHN0cmluZyk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbDogc3RyaW5nKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgY2hhbmdlSG91cihob3VyOiBudW1iZXIpOiB2b2lkO1xuICAgIGNoYW5nZU1pbnV0ZShtaW51dGU6IG51bWJlcik6IHZvaWQ7XG4gICAgY2hhbmdlUGVyaW9kKHBlcmlvZDogVGltZVBlcmlvZCk6IHZvaWQ7XG4gICAgb25UaW1lU2V0KHRpbWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIGNoYW5nZVRpbWU7XG4gICAgcHJpdmF0ZSByZXNldFRpbWU7XG4gICAgcHJpdmF0ZSBlbWl0TG9jYWxUaW1lQ2hhbmdlO1xuICAgIHByaXZhdGUgY2hhbmdlRGVmYXVsdFRpbWVWYWx1ZTtcbiAgICBwcml2YXRlIHVwZGF0ZUF2YWlsYWJsZUhvdXJzO1xuICAgIHByaXZhdGUgdXBkYXRlQXZhaWxhYmxlTWludXRlcztcbiAgICBwcml2YXRlIHVwZGF0ZUF2YWlsYWJsZVRpbWU7XG4gICAgcHJpdmF0ZSB1cGRhdGVUaW1lO1xuICAgIHByaXZhdGUgaW5pdFRpbWU7XG4gICAgcHJpdmF0ZSBpc1BlcmlvZERpc2FibGVkO1xufVxuIl19