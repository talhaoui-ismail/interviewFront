import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { ClockFaceTime } from '../../models/clock-face-time.interface';
import { TimeUnit } from '../../models/time-unit.enum';
import * as ɵngcc0 from '@angular/core';
export declare class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {
    timeUnit: typeof TimeUnit;
    isClockFaceDisabled: boolean;
    innerClockFaceSize: number;
    faceTime: ClockFaceTime[];
    selectedTime: ClockFaceTime;
    unit: TimeUnit;
    format: number;
    minutesGap: number;
    timeChange: EventEmitter<ClockFaceTime>;
    timeSelected: EventEmitter<number>;
    clockFace: ElementRef;
    clockHand: ElementRef;
    private isStarted;
    private touchStartHandler;
    private touchEndHandler;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    trackByTime(_: any, time: ClockFaceTime): string | number;
    onMousedown(e: any): void;
    selectTime(e: any): void;
    onMouseup(e: any): void;
    ngOnDestroy(): void;
    private addTouchEvents;
    private removeTouchEvents;
    private setClockHandPosition;
    private selectAvailableTime;
    private isInnerClockFace;
    private decreaseClockHand;
    private increaseClockHand;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxMaterialTimepickerFaceComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxMaterialTimepickerFaceComponent, "ngx-material-timepicker-face", never, {
    "selectedTime": "selectedTime";
    "faceTime": "faceTime";
    "unit": "unit";
    "format": "format";
    "minutesGap": "minutesGap";
}, {
    "timeChange": "timeChange";
    "timeSelected": "timeSelected";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdGVyaWFsLXRpbWVwaWNrZXItZmFjZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LW1hdGVyaWFsLXRpbWVwaWNrZXItZmFjZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsb2NrRmFjZVRpbWUgfSBmcm9tICcuLi8uLi9tb2RlbHMvY2xvY2stZmFjZS10aW1lLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaW1lVW5pdCB9IGZyb20gJy4uLy4uL21vZGVscy90aW1lLXVuaXQuZW51bSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJGYWNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHRpbWVVbml0OiB0eXBlb2YgVGltZVVuaXQ7XG4gICAgaXNDbG9ja0ZhY2VEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBpbm5lckNsb2NrRmFjZVNpemU6IG51bWJlcjtcbiAgICBmYWNlVGltZTogQ2xvY2tGYWNlVGltZVtdO1xuICAgIHNlbGVjdGVkVGltZTogQ2xvY2tGYWNlVGltZTtcbiAgICB1bml0OiBUaW1lVW5pdDtcbiAgICBmb3JtYXQ6IG51bWJlcjtcbiAgICBtaW51dGVzR2FwOiBudW1iZXI7XG4gICAgdGltZUNoYW5nZTogRXZlbnRFbWl0dGVyPENsb2NrRmFjZVRpbWU+O1xuICAgIHRpbWVTZWxlY3RlZDogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgY2xvY2tGYWNlOiBFbGVtZW50UmVmO1xuICAgIGNsb2NrSGFuZDogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIGlzU3RhcnRlZDtcbiAgICBwcml2YXRlIHRvdWNoU3RhcnRIYW5kbGVyO1xuICAgIHByaXZhdGUgdG91Y2hFbmRIYW5kbGVyO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHRyYWNrQnlUaW1lKF86IGFueSwgdGltZTogQ2xvY2tGYWNlVGltZSk6IHN0cmluZyB8IG51bWJlcjtcbiAgICBvbk1vdXNlZG93bihlOiBhbnkpOiB2b2lkO1xuICAgIHNlbGVjdFRpbWUoZTogYW55KTogdm9pZDtcbiAgICBvbk1vdXNldXAoZTogYW55KTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgYWRkVG91Y2hFdmVudHM7XG4gICAgcHJpdmF0ZSByZW1vdmVUb3VjaEV2ZW50cztcbiAgICBwcml2YXRlIHNldENsb2NrSGFuZFBvc2l0aW9uO1xuICAgIHByaXZhdGUgc2VsZWN0QXZhaWxhYmxlVGltZTtcbiAgICBwcml2YXRlIGlzSW5uZXJDbG9ja0ZhY2U7XG4gICAgcHJpdmF0ZSBkZWNyZWFzZUNsb2NrSGFuZDtcbiAgICBwcml2YXRlIGluY3JlYXNlQ2xvY2tIYW5kO1xufVxuIl19